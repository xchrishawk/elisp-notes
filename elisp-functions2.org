* Emacs Lisp Quick Reference


** Control Structures


*** Sequencing

See [[info:elisp#Sequencing]] for additional details.

- prog1 :: execute statements in order, returning the first result
- prog2 :: execute statements in order, returning the second result
- progn :: execute statements in order, returning the last result


*** Conditionals

See [[info:elisp#Conditionals]] for additional details.

- cond :: chooses between several branches based on multiple conditionals
- if :: choose between two branches based on a conditional
- pcase :: pattern matching case statement
- unless :: execute statements only when a condition is false
- when :: execute statements only when a condition is true


*** Boolean Logic

See [[info:elisp#Combining%20Conditions][info:elisp#Combining Conditions]] for additional details.

- and :: boolean AND
- not :: boolean NOT
- or :: boolean OR


*** Iteration

See [[info:elisp#Iteration]] for additional details.

- dolist :: execute block for each element in list
- dotimes :: execute block a set number of times
- while :: loop while a condition is true


** Symbols


*** Getting Information About Symbols

See [[info:elisp#Symbol%20Components][info:elisp#Symbol Components]] for additional details.

- symbol-file :: returns the name of the file that defined a symbol.
- symbol-function :: returns the contents of a symbol's function cell.
- symbol-name :: returns the contents of a symbol's print name cell.
- symbol-plist :: returns the contents of a symbol's property list cell.
- symbol-value :: returns the contents of a symbol's value cell.
- symbolp :: returns =t= if the argument is a symbol.


*** Defining Symbols

See [[info:elisp#Definitions]] for additional details.

- defalias :: define symbol as a function alias.
- defconst :: define symbol as a constant variable.
- defcustom :: define symbol as a customizable variable.
- defmacro :: define symbol as a macro.
- defsubst :: define symbol as an in-line function.
- defun :: define symbol as a function.
- defvar :: define symbol as variable.


*** Creating and Interning Symbols

See [[info:elisp#Creating%20Symbols][info:elisp#Creating Symbols]] for additional details.

- intern :: create and intern symbol, or return it if it already exists.
- intern-soft :: return symbol if it exists, or =nil= if not.
- make-symbol :: return newly allocated, uninterned symbol with specified name.
- mapatoms :: calls a function once with each symbol in an obarray.
- obarray :: /(variable)/ the default global obarray.
- unintern :: deletes a symbol from an obarray.

#+BEGIN_SRC emacs-lisp
  (setq my-symbol (make-symbol "bob"))    ; 'bob
  (intern-soft "bob")                     ; nil
  (intern "bob")                          ; 'bob
  (intern-soft "bob")                     ; 'bob
  (unintern "bob")                        ; t
  (intern-soft "bob")                     ; nil
  (unintern "bob")                        ; nil
#+END_SRC


*** Symbol Binding

- boundp :: returns =t= if the symbol's value cell is not void.
- fboundp :: returns =t= if the symbol's function cell is not void.
- fmakunbound :: removes the function from the symbol's function cell.
- makunbound :: removes the value from the symbol's value cell.

#+BEGIN_SRC emacs-lisp
  (setq myvar "hello")
  (boundp 'myvar)         ; t
  (makunbound 'myvar)
  (boundp 'myvar)         ; nil
  (message myvar)         ; error! variable is void
#+END_SRC


*** Symbol Property Lists

See [[info:elisp#Symbol%20Plists][info:elisp#Symbol Plists]] for additional details, and [[info:elisp#Standard%20Properties][info:elisp#Standard Properties]]
for a list of standard symbol properties.

- get :: gets the specified property from a symbol.
- put :: sets the specified property for a symbol.
- setplist :: replaces the property list for a symbol.

#+BEGIN_SRC emacs-lisp
  (intern "mysymbol")             ; 'mysymbol
  (get 'mysymbol 'myprop)         ; 'nil
  (put 'mysymbol 'myprop 5)       ; 5
  (get 'mysymbol 'myprop)         ; 5
#+END_SRC


** Variables


*** Setting Variables

- set :: set value of symbol
- setq :: set value of quoted symbol


*** Buffer-Local Variables

- buffer-local-value :: get buffer-local binding of variable in a buffer
- buffer-local-variables :: get list of buffer-local variables in a buffer
- defvar-local :: same as =defvar= followed by =make-variable-buffer-local=
- kill-all-local-variables :: deletes all buffer-local bindings
- kill-local-variable :: delete buffer-local binding of variable
- local-variable-if-set-p :: returns =t= if argument either has buffer-local
  binding, or is automatically buffer-local.
- local-variable-p :: returns =t= if argument is buffer local in specified buffer
- make-local-variable :: create buffer-local binding for variable in this buffer
- make-variable-buffer-local :: create automatically buffer-local variable
- setq-local :: same as =make-local-variable= followed by =setq=


** Functions


*** Getting Information About Functions

See [[info:elisp#What%20Is%20a%20Function][info:elisp#What Is a Function]] for additional details.

- byte-code-function-p :: returns =t= if the argument is a byte code function.
- functionp :: returns =t= if the argument is a callable function or symbol.
- subr-arity :: returns the arity of a function object.
- subrp :: returns =t= if the argument is a built-in function object.
- symbol-function :: returns the object in the function cell of a symbol.

#+BEGIN_SRC emacs-lisp
  (functionp 'kill-region)                ; t
  (functionp "abc")                       ; nil
  (functionp (symbol-function 'car))      ; t
  (subrp 'car)                            ; error! not a function
  (subrp (symbol-function 'car))          ; t
  (subr-arity (symbol-function 'insert))  ; (0 . many)
#+END_SRC


*** Executing Functions

See [[info:elisp#Calling%20Functions][info:elisp#Calling Functions]] for additional details.

- apply :: like =funcall=, but last argument may be a list of arguments to pass
- funcall :: calls a function or function symbol (not special form)

#+BEGIN_SRC emacs-lisp
  (funcall (lambda (x) (+ x 1)) 5)        ; 6
  (funcall 'sqrt 25)                      ; 5.0
  (funcall (symbol-function 'sqrt) 25)    ; 5.0
  (funcall 'and t t)                      ; error! and is a special form
  (apply '+ 1 (list 2 3))                 ; 6
#+END_SRC
