* Emacs Lisp Idioms

This file contains some useful idioms when programming in Emacs Lisp.


** Use of "or"

The =or= form can be used to execute only one of a set of candidate functions.
It will evaluate each subexpression until one returns a non-nil value, and then
returns that non-nil value. As an example:

#+BEGIN_SRC emacs-lisp
  (defun do-thing-with-buffer (buffer)
    (or (bufferp buffer)
        (setq buffer (get-buffer buffer))
        (setq buffer (current-buffer)))
    (buffer-name buffer))

  (do-thing-with-buffer "this buffer doesn't exist")
#+END_SRC

#+RESULTS:
: elisp-idioms.org

Something like the above is often used to allow either a buffer object or a
buffer name (as a string) to be passed to a function. If the argument =buffer=
is a buffer object, the first statement (=(bufferp buffer)=) returns =t=, so
the =or= form immediately returns without executing the next function. Otherwise,
=buffer= is set to =(get-buffer buffer)=. If *that* returns nil, buffer is set
to the current buffer.


** Else In cond Statements

Emacs Lisp does not directly have an =else= statement equivalent when using a
=cond= form. Instead, you specify the condition as =t=. For example:

#+BEGIN_SRC emacs-lisp
  (setq x 5)
  (cond
   ((< x 5) "x is less than 5")
   ((> x 5) "x is greater than 5")
   (t "x is equal to 5"))
#+END_SRC

#+RESULTS:
: x is equal to 5


** Prefix Arguments

The "P" and "p" arguments allow interactive functions to use "prefix" arguments,
which are numeric arguments specified with the universal argument key (=C-u=).

When the lower-case "p" argument specifier is used, the universal argument is
*always* converted to a number before being passed to the function.

#+BEGIN_SRC emacs-lisp
  (defun prefix-func (arg)
    (interactive "p")
    (message "Prefix argument was %d" arg))
#+END_SRC

For the above function...

- =M-x prefix-func= prints =Prefix argument was 1=
- =C-u M-x prefix-func= prints =Prefix argument was 4=
- =C-u 10 M-x prefix-func= prints =Prefix argument was 10=

When the upper-case "P" argument specifier is used, several different things can
be passed as an argument:

- If no argument was provided, the argument is nil
- If an unqualified prefix argument (some set of =C-u= without number) was provided,
  the argument is the corresponding number in a list.
- If a qualified prefix argument was provided, the argument is the number *not*
  in a list.

For example:

#+BEGIN_SRC emacs-lisp
  (defun raw-prefix-func (arg)
    (interactive "P")
    (message "Prefix argument was %s" arg))
#+END_SRC

- =M-x raw-prefix-func= prints =Prefix argument was nil=
- =C-u M-x raw-prefix-func= prints =Prefix argument was (4)=
- =C-u C-u M-x raw-prefix-func= prints =Prefix argument was (16)=
- =C-u 10 M-x raw-prefix-func= prints =Prefix argument was 10=

When using the "P" argument, you can use the above to distinguish the different
types of arguments which could be passed to the function. For example:

#+BEGIN_SRC emacs-lisp
  (defun arg-type (arg)
    (interactive "P")
    (cond
     ((consp arg) (message "unqualified universal argument"))
     ((numberp arg) (message "numeric argument"))
     (t (message "no argument"))))
#+END_SRC

If needed, a "raw" prefix argument can be converted to a numeric prefix argument
using the =(prefix-numeric-value)= function. For example, =(prefix-numeric-value nil)=
returns 1.
