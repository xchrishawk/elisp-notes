* Useful Functions

This document contains a quick list of useful Elisp functions and variables, along
with a brief description of what they do. It is not intended to be documentation
(use the Emacs documentation for that - =C-h f=), but rather just as a quick "menu"
to help find useful functions.


** Lisp Interaction

- interactive :: mark function as interactive, define how to get arguments
- message :: display message in echo area
- prefix-numeric-value :: convert a raw prefix argument to a numeric value


** Variables

- boundp :: returns =t= if the symbol has a value bound to it.
- eq :: returns =t= if the arguments refer to the same object
- equal :: returns =t= if the arguments are semantically equal
- makunbound :: unbinds a symbol's value.
- set :: sets the value of a variable
- setq :: same as set, except automatically quotes, and allows setting multiple variables


** Functions

- apply :: like funcall, but allows specifying arguments as a list
- defalias :: defines a new alias name for a function
- defun :: defines a named function
- defsubst :: defines an inline function
- fboundp :: returns =t= if the symbol has an object in its function cell.
- fmakunbound :: deletes the value in a symbol's function cell
- fset :: sets the value in a symbol's function cell
- funcall :: calls an arbitrary function
- symbol-function :: returns the object in the function cell of a symbol.


** Math/Logic

- <, >, <=, >=, = :: basic mathematical operators
- +, -, *, / :: basic arithmetic
- and, or, not :: basic logic


** Strings

- string<, string-lessp :: string comparison (same function)
- string=, string-equal :: string equality (same function)


** Lists

- mapc :: maps a function over a list for side effects and discards results
- mapcar :: maps a function over a list and returns a list of results
- mapconcat :: maps function over a list, returns concatenated string result with
  optional separator


** Excursions

- save-current-buffer :: save current buffer, execute body, then return to original
- save-excursion :: like save-current-buffer, but saves point and mark as well
- save-restriction :: saves current narrow/wide state, executes body, then returns
- save-selected-window :: saves selected window, execute body, then return
- with-current-buffer :: save-current-buffer with built-in set-buffer
- with-selected-window :: like with-current-buffer


** Point

- goto-char :: moves point to the specified character index
- point :: returns the current value of point as a character index
- point-max :: returns the maximum valid value of point for the active buffer
- point-min :: returns the minimum valid value of point for the active buffer
- search-forward :: move point to immediately after first instance of string


** Mark/Region

- mark :: get current value of mark
- push-mark :: set mark at the current location of point
- region-beginning :: returns the index of the start of region
- region-end :: returns the index of the end of region


** Killing Text

- kill-region :: kills the region between two points


** Buffers

- append-to-buffer :: insert part of current buffer into specified buffer at point
- barf-if-buffer-read-only :: display error and quit if buffer is read only
- buffer-file-name :: return name of file buffer is visiting
- buffer-modified-p :: returns =t= if buffer is modified
- buffer-name :: return name of buffer
- bufferp :: return =t= if argument is a buffer
- copy-to-buffer :: replace text in specified buffer with part of current buffer
- current-buffer :: returns current buffer
- erase-buffer :: empties current buffer
- get-buffer :: gets the buffer with the specified name
- get-buffer-create :: gets buffer with specified name, creating it if it doesn't exist
- insert-buffer :: inserts contents of specified buffer
- other-buffer :: switch to most recently used buffer not currently displayed
- read-only-mode :: switch buffer in or out of read only mode
- set-buffer :: edit (but don't display) specified buffer for duration of this command
- set-buffer-modified-p :: set or clear buffer modified flag
- switch-to-buffer :: changes active window to display specified buffer
- with-output-to-temp-buffer :: create and display temporary buffer in "help" mode


** Windows

- get-buffer-window :: return a window displaying buffer, or =nil= if no match
- get-buffer-window-list :: return list of all windows displaying buffer
- select-window :: sets the selected window
- set-window-point :: sets the value of point in the specified window
- window-point :: returns the value of point in the specified window


** Text Editing

- insert :: insert text at point
- insert-buffer-substring :: insert some portion of a different buffer


** Keyboard Commands

- current-active-maps :: return all active keymaps
- copy-keymap :: make a copy of a keymap
- kbd :: get key command from a string (e.g., "C-x C-a")
- keymapp :: predicate returning =t= if the argument is a keymap
- make-keymap :: make a new keymap with slots for all keys
- make-sparse-keymap :: make a new sparse (empty) keymap


* Useful Variables

- buffer-read-only :: set to =t= if buffer is read-only
- global-map :: the default global keyboard map
- kill-ring :: the current kill ring
